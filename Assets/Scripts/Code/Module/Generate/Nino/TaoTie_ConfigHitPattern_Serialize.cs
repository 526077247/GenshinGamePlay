/* this is generated by nino */
namespace TaoTie
{
    public partial class ConfigHitPattern
    {
        [LitJson.Extensions.JsonIgnore]
        public static ConfigHitPattern.SerializationHelper NinoSerializationHelper = new ConfigHitPattern.SerializationHelper();
        public class SerializationHelper: Nino.Serialization.NinoWrapperBase<ConfigHitPattern>
        {
            #region NINO_CODEGEN
            public override void Serialize(ConfigHitPattern value, Nino.Serialization.Writer writer)
            {
                if(value == null)
                {
                    writer.Write(false);
                    return;
                }
                writer.Write(true);
                writer.Write(value.OnHitEffectName);
                writer.CompressAndWriteEnum<TaoTie.HitLevel>(value.HitLevel);
                writer.WriteCommonVal<TaoTie.BaseValue>(value.HitImpulseX==null?TypeInfo<TaoTie.BaseValue>.Type:value.HitImpulseX.GetType(),value.HitImpulseX);
                writer.WriteCommonVal<TaoTie.BaseValue>(value.HitImpulseY==null?TypeInfo<TaoTie.BaseValue>.Type:value.HitImpulseY.GetType(),value.HitImpulseY);
                writer.Write(value.HitImpulseType);
                TaoTie.ConfigHitImpulse.NinoSerializationHelper.Serialize(value.OverrideHitImpulse, writer);
                writer.CompressAndWriteEnum<TaoTie.RetreatType>(value.RetreatType);
                writer.Write(value.HitHaltTimeRawNum);
                writer.Write(value.HitHaltTimeScaleRawNum);
                writer.Write(value.CanBeDefenceHalt);
                writer.Write(value.MuteHitText);
                writer.Write(value.Recurring);
            }

            public override ConfigHitPattern Deserialize(Nino.Serialization.Reader reader)
            {
                if(!reader.ReadBool())
                    return null;
                ConfigHitPattern value = new ConfigHitPattern();
                value.OnHitEffectName = reader.ReadString();
                reader.DecompressAndReadEnum<TaoTie.HitLevel>(ref value.HitLevel);
                value.HitImpulseX = reader.ReadCommonVal<TaoTie.BaseValue>();
                value.HitImpulseY = reader.ReadCommonVal<TaoTie.BaseValue>();
                value.HitImpulseType = reader.ReadString();
                value.OverrideHitImpulse = TaoTie.ConfigHitImpulse.NinoSerializationHelper.Deserialize(reader);
                reader.DecompressAndReadEnum<TaoTie.RetreatType>(ref value.RetreatType);
                reader.Read<System.Single>(ref value.HitHaltTimeRawNum, Nino.Shared.Mgr.ConstMgr.SizeOfUInt);
                reader.Read<System.Single>(ref value.HitHaltTimeScaleRawNum, Nino.Shared.Mgr.ConstMgr.SizeOfUInt);
                reader.Read<System.Boolean>(ref value.CanBeDefenceHalt, 1);
                reader.Read<System.Boolean>(ref value.MuteHitText, 1);
                reader.Read<System.Boolean>(ref value.Recurring, 1);
                return value;
            }
            #endregion
        }
    }
}