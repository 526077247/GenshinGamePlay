using System;
using System.IO;
using System.Linq;
using System.Text;
using Nino.Shared.Mgr;
using Nino.Shared.Util;
using System.Reflection;
using System.Collections.Generic;

namespace Nino.Serialization
{
    /// <summary>
    /// Nino code generator
    /// </summary>
    public static class CodeGenerator
    {
        /// <summary>
        /// Generate serialization code file at Assets/ouputPath
        /// editor only method
        /// </summary>
        /// <param name="outputPath"></param>
        /// <param name="assemblies"></param>
        public static void GenerateSerializationCodeForAllTypePossible(string outputPath = "Nino/Generated",
            Assembly[] assemblies = null)
        {
            //find all types
            var types = (assemblies ?? AppDomain.CurrentDomain.GetAssemblies()).SelectMany(a => a.GetTypes()).ToList()
                .FindAll(t =>
                {
                    //find NinoSerializeAttribute
                    NinoSerializeAttribute[] ns =
                        (NinoSerializeAttribute[])t.GetCustomAttributes(typeof(NinoSerializeAttribute), true);
                    if (ns.Length == 0) return false;
                    return true;
                }).ToList();
            //iterate
            foreach (var type in types)
            {
                //gen
                GenerateSerializationCode(type, outputPath);
            }
        }

        /// <summary>
        /// Get a valid nino serialize class
        /// </summary>
        /// <param name="type"></param>
        /// <param name="log"></param>
        /// <returns></returns>
        private static bool GetValidNinoClass(Type type, bool log = true)
        {
            //nested
            if (type.IsNested)
            {
                if (log)
                    Logger.E("Code Gen", $"Can not generate code for type: {type} due to it is a nested class");
                return false;
            }

            //generic
            if (type.IsGenericType)
            {
                if (log)
                    Logger.E("Code Gen", $"Can not generate code for type: {type} due to it is a generic class");
                return false;
            }

            //find NinoSerializeAttribute
            NinoSerializeAttribute[] ns =
                (NinoSerializeAttribute[])type.GetCustomAttributes(typeof(NinoSerializeAttribute), true);
            if (ns.Length == 0) return false;

            CodeGenIgnoreAttribute[] ci =
                (CodeGenIgnoreAttribute[])type.GetCustomAttributes(typeof(CodeGenIgnoreAttribute), true);
            if (ci.Length != 0) return false;
            return true;
        }

        /// <summary>
        /// Generate serialization code file at Assets/ouputPath
        /// editor only method
        /// </summary>
        /// <param name="type"></param>
        /// <param name="outputPath"></param>
        // ReSharper disable CognitiveComplexity
        public static void GenerateSerializationCode(Type type, string outputPath = "Nino/Generated")
            // ReSharper restore CognitiveComplexity
        {
            //nino class only
            if (!GetValidNinoClass(type)) return;

            //code template
            string template =
                @"/* this is generated by nino */
{namespace}
{start}
    public partial struct {type}
    {
        public static {type}.SerializationHelper NinoSerializationHelper = new {type}.SerializationHelper();
        public class SerializationHelper: Nino.Serialization.NinoWrapperBase<{type}>
        {
            #region NINO_CODEGEN
            public override void Serialize({type} value, Nino.Serialization.Writer writer)
            {
                if(value == null)
                {
                    writer.Write(false);
                    return;
                }
                writer.Write(true);
{members}
            }

            public override {type} Deserialize(Nino.Serialization.Reader reader)
            {
                if(!reader.ReadBool())
                    return null;
                {type} value = new {type}();
{fields}
            }
            #endregion
        }
    }
{end}";
            if (type.IsClass)
            {
                template = template.Replace("struct", "class");
            }

            //replace namespace
            if (!string.IsNullOrEmpty(type.Namespace))
            {
                template = template.Replace("{namespace}", $"namespace {type.Namespace}");
                template = template.Replace("{start}", "{");
                template = template.Replace("{end}", "}");
            }
            else
            {
                template = template.Replace("{namespace}", string.Empty);
                template = template.Replace("{start}", string.Empty);
                template = template.Replace("{end}", string.Empty);
            }

            //class full name
            var classFullName =
                $"{type.GetFriendlyName()}";
            //replace full name
            template = template.Replace("{type}", classFullName);

            //find members
            TypeModel.TryGetModel(type, out var model);
            //invalid model
            if (model != null)
            {
                if (!model.Valid)
                {
                    throw new InvalidOperationException("invalid model");
                }
            }

            //generate model
            if (model == null)
            {
                model = TypeModel.CreateModel(type);
            }

            Dictionary<ushort, MemberInfo> members = model.Members;

            #region serialize

            //build params
            StringBuilder sb = new StringBuilder();
            var keys = members.Keys.OrderBy(k => k).ToList();
            foreach (var key in keys)
            {
                var mt = members[key] is FieldInfo fi ? fi.FieldType : ((PropertyInfo)members[key]).PropertyType;
                //enum
                if (mt.IsEnum)
                {
                    sb.Append(
                        $"                writer.CompressAndWriteEnum<{BeautifulLongTypeName(mt)}>(value.{members[key].Name});\n");
                }
                //array/list
                else if (mt.IsArray || (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                {
                    Type elemType = mt.IsGenericType ? mt.GenericTypeArguments[0] : mt.GetElementType();
                    //if nino serialize class => loop call method
                    //check null
                    sb.Append($"                if(value.{members[key].Name} != null)\n");
                    sb.Append("                {\n");
                    //write not null
                    sb.Append("                    writer.Write(true);\n");
                    //write len
                    sb.Append(
                        $"                    writer.CompressAndWrite(value.{members[key].Name}.{(mt.IsArray ? "Length" : "Count")});\n");
                    //write item
                    sb.Append($"                    foreach (var entry in value.{members[key].Name})\n");
                    sb.Append("                    {\n");
                    if (elemType.IsArray || (elemType.IsGenericType &&
                                             elemType.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                    {
                        sb.Append($"{GetSerializeBasicTypeStatement(elemType, "entry", true)}");
                    }
                    else if (elemType.IsGenericType && elemType.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                    {
                        sb.Append($"{GetSerializeBasicTypeStatement(elemType, "entry", true)}");
                    }
                    else
                    {
                        sb.Append($"                        {GetSerializeBasicTypeStatement(elemType, "entry", true)};\n");
                    }

                    sb.Append("                    }\n");
                    sb.Append("                }\n");
                    //if null then write 0 len
                    sb.Append("                else\n");
                    sb.Append("                {\n");
                    //write is null
                    sb.Append("                    writer.Write(false);\n");
                    sb.Append("                }\n");
                }
                //dict
                else if (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                {
                    var args = mt.GetGenericArguments();
                    Type keyType = args[0];
                    Type valueType = args[1];
                    //if nino serialize class => loop call method
                    //check null
                    sb.Append($"                if(value.{members[key].Name} != null)\n");
                    sb.Append("                {\n");
                    //write not null
                    sb.Append("                    writer.Write(true);\n");
                    //write len
                    sb.Append($"                    writer.CompressAndWrite(value.{members[key].Name}.Count);\n");
                    //write item
                    sb.Append($"                    foreach (var entry in value.{members[key].Name})\n");
                    sb.Append("                    {\n");
                    //write key
                    if (keyType.IsArray || (keyType.IsGenericType &&
                                            keyType.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                    {
                        sb.Append($"{GetSerializeBasicTypeStatement(keyType, "entry.Key", true)}");
                    }
                    else if (keyType.IsGenericType && keyType.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                    {
                        sb.Append($"{GetSerializeBasicTypeStatement(keyType, "entry.Key", true)}");
                    }
                    else
                    {
                        sb.Append($"                        {GetSerializeBasicTypeStatement(keyType, "entry.Key", true)};\n");
                    }

                    //write value
                    if (valueType.IsArray || (valueType.IsGenericType &&
                                              valueType.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                    {
                        sb.Append($"{GetSerializeBasicTypeStatement(valueType, "entry.Value", true)}");
                    }
                    else if (valueType.IsGenericType && valueType.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                    {
                        sb.Append($"{GetSerializeBasicTypeStatement(valueType, "entry.Value", true)}");
                    }
                    else
                    {
                        sb.Append(
                            $"                        {GetSerializeBasicTypeStatement(valueType, "entry.Value", true)};\n");
                    }

                    sb.Append("                    }\n");
                    sb.Append("                }\n");
                    //if null then write 0 len
                    sb.Append("                else\n");
                    sb.Append("                {\n");
                    //write is null
                    sb.Append("                    writer.Write(false);\n");
                    sb.Append("                }\n");
                }
                //basic type
                else
                {
                    sb.Append($"                {GetSerializeBasicTypeStatement(mt, $"value.{members[key].Name}", members[key] is PropertyInfo)};\n");
                }
            }

            if (members.Count > 0)
            {
                //remove \n at the end
                sb.Remove(sb.Length - 1, 1);
            }

            //replace template members
            template = template.Replace("{members}", sb.ToString());

            #endregion

            #region deserialize

            sb.Clear();
            keys = members.Keys.OrderBy(k => k).ToList();
            foreach (var key in keys)
            {
                var mt = members[key] is FieldInfo fi ? fi.FieldType : ((PropertyInfo)members[key]).PropertyType;
                //enum
                if (mt.IsEnum)
                {
                    if (members[key] is PropertyInfo)
                    {
                        sb.Append(
                            $"                value.{members[key].Name} = reader.DecompressAndReadEnum<{BeautifulLongTypeName(mt)}>();\n");
                    }
                    else
                    {
                        sb.Append(
                            $"                reader.DecompressAndReadEnum<{BeautifulLongTypeName(mt)}>(ref value.{members[key].Name});\n");
                    }
                }
                //array/list
                else if (mt.IsArray || (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                {
                    Type elemType = mt.IsGenericType ? mt.GenericTypeArguments[0] : mt.GetElementType();

                    if (elemType == ConstMgr.ByteType)
                    {
                        sb.Append(
                            $"                if(reader.ReadBool()) value.{members[key].Name} = reader.ReadBytes(reader.ReadLength());\n");
                        continue;
                    }

                    //create field
                    string arr = String.Empty;
                    if (mt.IsArray)
                    {
                        //multidimensional array
                        if (mt.GetArrayRank() > 1)
                        {
                            throw new NotSupportedException(
                                "can not serialize multidimensional array, use jagged array instead");
                        }

                        //jagged
                        //wrong -> value.e = new System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,System.Int32[reader.ReadLength()][]>>[];
                        //correct -> value.e = new System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,System.Int32[][]>>[reader.ReadLength()];
                        var et = $"{BeautifulLongTypeName(elemType)}[]";
                        int pos = et.Length - 1;
                        while (et[pos] == '[' || et[pos] == ']')
                        {
                            pos--;
                        }

                        var sub = et.Substring(pos, 2);
                        arr = $"{et.Replace(sub, $"{sub}reader.ReadLength()")}";
                    }

                    sb.Append(
                        "                if(reader.ReadBool()){" +
                        $"value.{members[key].Name} = new {(mt.IsArray ? arr : $"{BeautifulLongTypeName(mt)}(reader.ReadLength())")};\n");
                    //write items
                    sb.Append(
                        $"                for(int i = 0, cnt = value.{members[key].Name}.{(mt.IsArray ? "Length" : "Capacity")}; i < cnt; i++)\n");
                    sb.Append("                {\n");
                    //if nino serialize class => loop call method
                    string valStr = GetValidNinoClass(elemType, false)
                        ? $"{BeautifulLongTypeName(elemType)}.NinoSerializationHelper.Deserialize(reader)"
                        : GetDeserializeBasicTypeStatement(elemType, true,
                            $"value_{members[key].Name}_i", "                \t");

                    if (elemType != null && !FullDeserializeStatement(elemType, false))
                    {
                        sb.Append(
                            $"                    var value_{members[key].Name}_i = {valStr}".Replace(
                                $"value_{members[key].Name}_i = value_{members[key].Name}_i =", $"value_{members[key].Name}_i =") +
                            $"{((elemType.IsArray || (elemType.IsGenericType && elemType.GetGenericTypeDefinition() == ConstMgr.ListDefType)) ? "" : ";")}\n");
                    }
                    else
                    {
                        if ((elemType.IsGenericType && elemType.GetGenericTypeDefinition() == ConstMgr.DictDefType))
                        {
                            sb.Append($" {valStr}");
                        }
                        else
                        {
                            sb.Append(
                                $"                    {BeautifulLongTypeName(elemType)} value_{members[key].Name}_i = {valStr};\n");
                        }
                    }

                    if (mt.IsArray)
                    {
                        sb.Append(
                            $"                    value.{members[key].Name}[i] = value_{members[key].Name}_i;\n");
                    }
                    else
                    {
                        sb.Append(
                            $"                    value.{members[key].Name}.Add(value_{members[key].Name}_i);\n");
                    }

                    sb.Append("                }}\n");
                }
                //dict
                else if (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                {
                    var args = mt.GetGenericArguments();
                    Type keyType = args[0];
                    Type valueType = args[1];
                    //create field
                    sb.Append(
                        "                if(reader.ReadBool()){" +
                        $"                var value_{members[key].Name}_len = reader.ReadLength();\n");
                    sb.Append(
                        $"                value.{members[key].Name} = new {BeautifulLongTypeName(mt)}(value_{members[key].Name}_len);\n");
                    //write items
                    sb.Append($"                for(int i = 0; i < value_{members[key].Name}_len; i++)\n");
                    sb.Append("                {\n");

                    //read key
                    string valStr = GetValidNinoClass(keyType, false)
                        ? $"{BeautifulLongTypeName(keyType)}.NinoSerializationHelper.Deserialize(reader)"
                        : GetDeserializeBasicTypeStatement(keyType, true, $"value_{members[key].Name}_key",
                            "                \t");
                    if (!FullDeserializeStatement(keyType, false))
                    {
                        sb.Append(
                            $"                    var value_{members[key].Name}_key = {valStr}".Replace(
                                $"value_{members[key].Name}_key = value_{members[key].Name}_key =", $"value_{members[key].Name}_key =") +
                            $"{((keyType.IsArray || (keyType.IsGenericType && keyType.GetGenericTypeDefinition() == ConstMgr.ListDefType)) ? "" : ";")}\n");
                    }
                    else
                    {
                        if ((keyType.IsGenericType && keyType.GetGenericTypeDefinition() == ConstMgr.DictDefType))
                        {
                            sb.Append($" {valStr}");
                        }
                        else
                        {
                            sb.Append(
                                $"                    {BeautifulLongTypeName(keyType)} value_{members[key].Name}_key = {valStr};\n");
                        }
                    }

                    //read value
                    valStr = GetValidNinoClass(valueType, false)
                        ? $"{BeautifulLongTypeName(valueType)}.NinoSerializationHelper.Deserialize(reader)"
                        : GetDeserializeBasicTypeStatement(valueType, true, $"value_{members[key].Name}_val",
                            "                \t");
                    if (!FullDeserializeStatement(valueType, false))
                    {
                        sb.Append(
                            $"                    var value_{members[key].Name}_val = {valStr}".Replace(
                                $"value_{members[key].Name}_val = value_{members[key].Name}_val =", $"value_{members[key].Name}_val =") +
                            $"{((valueType.IsArray || (valueType.IsGenericType && valueType.GetGenericTypeDefinition() == ConstMgr.ListDefType)) ? "" : ";")}\n");
                    }
                    else
                    {
                        if ((valueType.IsGenericType && valueType.GetGenericTypeDefinition() == ConstMgr.DictDefType))
                        {
                            sb.Append($" {valStr}");
                        }
                        else
                        {
                            sb.Append(
                                $"                    {BeautifulLongTypeName(valueType)} value_{members[key].Name}_val = {valStr};\n");
                        }
                    }

                    sb.Append(
                        $"                    value.{members[key].Name}[value_{members[key].Name}_key] = value_{members[key].Name}_val;\n");

                    sb.Append("                }}\n");
                }
                //not enum -> basic type
                else
                {
                    string val = GetDeserializeBasicTypeStatement(mt, members[key] is PropertyInfo,
                        $"value.{members[key].Name}");
                    switch (Type.GetTypeCode(mt))
                    {
                        case TypeCode.Int32:
                        case TypeCode.UInt32:
                        case TypeCode.Int64:
                        case TypeCode.UInt64:
                            sb.Append($"                {val}\n");
                            break;
                        default:
                            sb.Append(FullDeserializeStatement(mt, members[key] is PropertyInfo)
                                ? $"                {val}\n"
                                : $"                value.{members[key].Name} = {val};\n");
                            break;
                    }
                }
            }

            sb.Append("                return value;\n");
            //remove comma at the end
            sb.Remove(sb.Length - 1, 1);

            //replace template fields
            template = template.Replace("{fields}", sb.ToString());

            #endregion

            //save path
            var output = Path.Combine(ConstMgr.AssetPath, outputPath);
            if (!Directory.Exists(output))
            {
                Directory.CreateDirectory(output);
            }

            //save file path
            output = Path.Combine(output,
                $"{type.Namespace}{(!string.IsNullOrEmpty(type.Namespace) ? "." : "")}{type.GetFriendlyName()}"
                    .Replace(".", "_").Replace(",", "_")
                    .Replace("<", "_").Replace(">", "_") +
                "_Serialize.cs");
            if (File.Exists(output))
            {
                File.Delete(output);
            }

            //save
            File.WriteAllText(output, template);

#if UNITY_2017_1_OR_NEWER
            Logger.D("Code Gen", $"saved {output}");
#else
            Logger.D("Code Gen", $"saved {output}, please move this file to your project");
#endif
        }

        private static bool FullDeserializeStatement(Type type, bool isProperty)
        {
            if (isProperty) return false;
            switch (Type.GetTypeCode(type))
            {
                case TypeCode.Byte:
                case TypeCode.SByte:
                case TypeCode.Int16:
                case TypeCode.UInt16:
                case TypeCode.Boolean:
                case TypeCode.Double:
                case TypeCode.Single:
                case TypeCode.Decimal:
                case TypeCode.Char:
                    return true;
                default:
                    if ((type.IsGenericType && type.GetGenericTypeDefinition() == ConstMgr.DictDefType))
                    {
                        return true;
                    }

                    return false;
            }
        }

        // ReSharper disable CognitiveComplexity
        private static string GetDeserializeBasicTypeStatement(Type mt, bool isProperty, string val = "",
                string space = "                ")
            // ReSharper restore CognitiveComplexity
        {
            switch (Type.GetTypeCode(mt))
            {
                case TypeCode.Int32:
                case TypeCode.UInt32:
                case TypeCode.Int64:
                case TypeCode.UInt64:
                    return isProperty
                        ? $"{val} = reader.DecompressAndReadNumber<{BeautifulLongTypeName(mt)}>();"
                        : $"reader.DecompressAndReadNumber<{BeautifulLongTypeName(mt)}>(ref {val});";
                case TypeCode.Byte:
                    return isProperty ? "reader.ReadByte()" : $"reader.Read<System.Byte>(ref {val}, 1);";
                case TypeCode.SByte:
                    return isProperty ? "reader.ReadSByte()" : $"reader.Read<System.SByte>(ref {val}, 1);";
                case TypeCode.Int16:
                    return isProperty
                        ? "reader.ReadInt16()"
                        : $"reader.Read<System.Int16>(ref {val}, Nino.Shared.Mgr.ConstMgr.SizeOfShort);";
                case TypeCode.UInt16:
                    return isProperty
                        ? "reader.ReadUInt16()"
                        : $"reader.Read<System.UInt16>(ref {val}, Nino.Shared.Mgr.ConstMgr.SizeOfUShort);";
                case TypeCode.String:
                    return "reader.ReadString()";
                case TypeCode.Boolean:
                    return isProperty ? "reader.ReadBool()" : $"reader.Read<System.Boolean>(ref {val}, 1);";
                case TypeCode.Double:
                    return isProperty
                        ? "reader.ReadDouble()"
                        : $"reader.Read<System.Double>(ref {val}, Nino.Shared.Mgr.ConstMgr.SizeOfULong);";
                case TypeCode.Single:
                    return isProperty
                        ? "reader.ReadSingle()"
                        : $"reader.Read<System.Single>(ref {val}, Nino.Shared.Mgr.ConstMgr.SizeOfUInt);";
                case TypeCode.Decimal:
                    return isProperty
                        ? "reader.ReadDecimal()"
                        : $"reader.Read<System.Decimal>(ref {val}, Nino.Shared.Mgr.ConstMgr.SizeOfDecimal);";
                case TypeCode.Char:
                    return isProperty
                        ? "reader.ReadChar()"
                        : $"reader.Read<System.Char>(ref {val}, Nino.Shared.Mgr.ConstMgr.SizeOfUShort);";
                case TypeCode.DateTime:
                    return "reader.ReadDateTime()";
                default:
                    if (GetValidNinoClass(mt, false))
                    {
                        return $"{BeautifulLongTypeName(mt)}.NinoSerializationHelper.Deserialize(reader)";
                    }
                    
                    //enum
                    if (mt.IsEnum)
                    {
                        return isProperty
                            ? $"reader.DecompressAndReadEnum<{BeautifulLongTypeName(mt)}>()"
                            : $"reader.DecompressAndReadEnum<{BeautifulLongTypeName(mt)}>(ref {val});";
                    }

                    if (mt.IsArray ||
                        (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                    {
                        Type elemType = mt.IsGenericType ? mt.GenericTypeArguments[0] : mt.GetElementType();
                        StringBuilder builder = new StringBuilder();
                        if (elemType == ConstMgr.ByteType)
                        {
                            builder.Append("if(reader.ReadBool()) reader.ReadBytes(reader.ReadLength());\n");
                            return builder.ToString();
                        }

                        //create field
                        string arr = String.Empty;
                        if (mt.IsArray)
                        {
                            //multidimensional array
                            if (mt.GetArrayRank() > 1)
                            {
                                throw new NotSupportedException(
                                    "can not serialize multidimensional array, use jagged array instead");
                            }

                            //jagged
                            //wrong -> value.e = new System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,System.Int32[reader.ReadLength()][]>>[];
                            //correct -> value.e = new System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,System.Int32[][]>>[reader.ReadLength()];
                            var et = $"{BeautifulLongTypeName(elemType)}[]";
                            int pos = et.Length - 1;
                            while (et[pos] == '[' || et[pos] == ']')
                            {
                                pos--;
                            }

                            var sub = et.Substring(pos, 2);
                            arr = $"{et.Replace(sub, $"{sub}reader.ReadLength()")}";
                        }

                        builder.Append(
                            $"!reader.ReadBool() ? null : new {(mt.IsArray ? arr : $"{BeautifulLongTypeName(mt)}(reader.ReadLength())")};\n");
                        //write items
                        builder.Append(space)
                            .Append(
                                $"if({val}"+"!=null){"+$"for(int {val}_i = 0, {val}_cnt = {val}.{(mt.IsArray ? "Length" : "Capacity")}; {val}_i < {val}_cnt; {val}_i++)\n");
                        builder.Append(space).Append("{\n");
                        //if nino serialize class => loop call method
                        string valStr = GetValidNinoClass(elemType, false)
                            ? $"{BeautifulLongTypeName(elemType)}.NinoSerializationHelper.Deserialize(reader)"
                            : GetDeserializeBasicTypeStatement(elemType, true, $"value_{val}_i", $"{space}\t");

                        if (elemType != null && !FullDeserializeStatement(elemType, false))
                        {
                            builder.Append(space).Append('\t').Append($"var value_{val}_i = {valStr}".Replace(
                                                                          $"value_{val}_i = value_{val}_i =", $"value_{val}_i =") +
                                                                      $"{((elemType.IsArray || (elemType.IsGenericType && elemType.GetGenericTypeDefinition() == ConstMgr.ListDefType)) ? "" : ";")}\n");
                        }
                        else
                        {
                            if ((elemType.IsGenericType && elemType.GetGenericTypeDefinition() == ConstMgr.DictDefType))
                            {
                                builder.Append($" {valStr}");
                            }
                            else
                            {
                                builder.Append(
                                    $"                    {BeautifulLongTypeName(elemType)} value_{val}_i = {valStr};\n");
                            }
                        }

                        if (mt.IsArray)
                        {
                            builder.Append(space).Append('\t').Append(
                                $"{val}[{val}_i] = value_{val}_i;\n");
                        }
                        else
                        {
                            builder.Append(space).Append('\t').Append(
                                $"{val}.Add(value_{val}_i);\n");
                        }

                        builder.Append(space).Append("}}");
                        return builder.ToString();
                    }

                    if (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                    {
                        StringBuilder builder = new StringBuilder();
                        var args = mt.GetGenericArguments();
                        Type keyType = args[0];
                        Type valueType = args[1];
                        //create field
                        builder.Append(space).Append(
                            $"{BeautifulLongTypeName(mt)} {val} = null;\n");
                        builder.Append(space).Append("if(reader.ReadBool()){"+$"var {val}_len = reader.ReadLength();\n");
                        builder.Append(space).Append(
                            $"{val} = new {BeautifulLongTypeName(mt)}({val}_len);\n");
                        //write items
                        builder.Append(space).Append($"for(int {val}_i = 0; {val}_i < {val}_len; {val}_i++)\n");
                        builder.Append(space).Append("{\n");

                        //read key
                        string valStr = GetValidNinoClass(keyType, false)
                            ? $"{BeautifulLongTypeName(keyType)}.NinoSerializationHelper.Deserialize(reader)"
                            : GetDeserializeBasicTypeStatement(keyType, true, $"{val}_key", $"{space}\t");
                        if (!FullDeserializeStatement(keyType, false))
                        {
                            builder.Append(space).Append('\t').Append($"var {val}_key = {valStr}".Replace(
                                                                          $"{val}_key = {val}_key =", $"{val}_key =") +
                                                                      $"{((keyType.IsArray || (keyType.IsGenericType && keyType.GetGenericTypeDefinition() == ConstMgr.ListDefType)) ? "" : ";")}\n");
                        }
                        else
                        {
                            if ((keyType.IsGenericType && keyType.GetGenericTypeDefinition() == ConstMgr.DictDefType))
                            {
                                builder.Append($" {valStr}");
                            }
                            else
                            {
                                builder.Append(
                                    $"                    {BeautifulLongTypeName(keyType)} value_{val}_i = {valStr};\n");
                            }
                        }

                        //read value
                        valStr = GetValidNinoClass(valueType, false)
                            ? $"{BeautifulLongTypeName(valueType)}.NinoSerializationHelper.Deserialize(reader)"
                            : GetDeserializeBasicTypeStatement(valueType, true, $"{val}_val", $"{space}\t");
                        if (!FullDeserializeStatement(valueType, false))
                        {
                            builder.Append(space).Append('\t').Append($"var {val}_val = {valStr}".Replace(
                                                                          $"{val}_val = {val}_val =", $"{val}_val =") +
                                                                      $"{((valueType.IsArray || (valueType.IsGenericType && valueType.GetGenericTypeDefinition() == ConstMgr.ListDefType)) ? "" : ";")}\n");
                        }
                        else
                        {
                            if ((valueType.IsGenericType &&
                                 valueType.GetGenericTypeDefinition() == ConstMgr.DictDefType))
                            {
                                builder.Append($" {valStr}");
                            }
                            else
                            {
                                builder.Append(
                                    $"                    {BeautifulLongTypeName(valueType)} value_{val}_i = {valStr};\n");
                            }
                        }

                        builder.Append(space).Append('\t').Append($"{val}[{val}_key] = {val}_val;\n");

                        builder.Append(space).Append("}}\n");
                        return builder.ToString();
                    }

                    return $"reader.ReadCommonVal<{BeautifulLongTypeName(mt)}>()";
            }
        }

        // ReSharper disable CognitiveComplexity
        private static string GetSerializeBasicTypeStatement(Type mt, string val, bool isProperty, int indent = 0,
                string space = "                        ")
            // ReSharper restore CognitiveComplexity
        {
            switch (Type.GetTypeCode(mt))
            {
                case TypeCode.Int32:
                case TypeCode.UInt32:
                case TypeCode.Int64:
                case TypeCode.UInt64:
                    return isProperty ? $"writer.CompressAndWrite({val})" : $"writer.CompressAndWrite(ref {val})";
                case TypeCode.Byte:
                case TypeCode.SByte:
                case TypeCode.Int16:
                case TypeCode.UInt16:
                case TypeCode.String:
                case TypeCode.Boolean:
                case TypeCode.Double:
                case TypeCode.Single:
                case TypeCode.Decimal:
                case TypeCode.Char:
                case TypeCode.DateTime:
                    return $"writer.Write({val})";
                default:
                    if (GetValidNinoClass(mt, false))
                    {
                        return $"{BeautifulLongTypeName(mt)}.NinoSerializationHelper.Serialize({val}, writer)";
                    }

                    if (mt.IsArray || (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                    {
                        StringBuilder builder = new StringBuilder();
                        Type elemType = mt.IsGenericType ? mt.GenericTypeArguments[0] : mt.GetElementType();
                        if (elemType == null)
                        {
                            throw new InvalidOperationException("Invalid array type");
                        }

                        //if nino serialize class => loop call method
                        //check null
                        builder.Append(space).Append(Repeat("    ", indent)).Append($"if({val} != null)\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("{\n");
                        //write not null
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append("writer.Write(true);\n");
                        //write len
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append($"writer.CompressAndWrite({val}.{(mt.IsArray ? "Length" : "Count")});\n");
                        //write item
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append($"foreach (var entry{indent} in {val})\n");
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent)).Append("{\n");
                        if (elemType.IsArray || (elemType.IsGenericType &&
                                                 elemType.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                        {
                            builder.Append(
                                $"{GetSerializeBasicTypeStatement(elemType, $"entry{indent}", true, indent + 1, $"{space}\t")}");
                        }
                        else if (elemType.IsGenericType && elemType.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                        {
                            builder.Append(
                                $"{GetSerializeBasicTypeStatement(elemType, $"entry{indent}", true, indent + 1, $"{space}\t")}");
                        }
                        else
                        {
                            builder.Append(space).Append('\t').Append('\t').Append(Repeat("    ", indent)).Append(
                                $"{GetSerializeBasicTypeStatement(elemType, $"entry{indent}", true, indent, space)};\n");
                        }

                        builder.Append(space).Append('\t').Append(Repeat("    ", indent)).Append("}\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("}\n");
                        //if null then write 0 len
                        builder.Append(space).Append(Repeat("    ", indent)).Append("else\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("{\n");
                        //write is null
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append("writer.Write(false);\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("}\n");
                        return builder.ToString();
                    }

                    if (mt.IsGenericType && mt.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                    {
                        StringBuilder builder = new StringBuilder();
                        var args = mt.GetGenericArguments();
                        Type keyType = args[0];
                        Type valueType = args[1];
                        //check null
                        builder.Append(space).Append(Repeat("    ", indent)).Append($"if({val} != null)\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("{\n");
                        //write not null
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append("writer.Write(true);\n");
                        //write len
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append($"writer.CompressAndWrite({val}.Count);\n");
                        //write item
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append($"foreach (var entry{indent} in {val})\n");
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent)).Append("{\n");

                        //write key
                        if (keyType.IsArray || (keyType.IsGenericType &&
                                                keyType.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                        {
                            builder.Append(
                                $"{GetSerializeBasicTypeStatement(keyType, $"entry{indent}", true, indent + 1, $"{space}\t")}");
                        }
                        else if (keyType.IsGenericType && keyType.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                        {
                            builder.Append(
                                $"{GetSerializeBasicTypeStatement(keyType, $"entry{indent}", true, indent + 1, $"{space}\t")}");
                        }
                        else
                        {
                            builder.Append(space).Append('\t').Append('\t').Append(Repeat("    ", indent)).Append(
                                $"{GetSerializeBasicTypeStatement(keyType, $"entry{indent}.Key", true, indent, space)};\n");
                        }

                        //write value
                        if (valueType.IsArray || (valueType.IsGenericType &&
                                                  valueType.GetGenericTypeDefinition() == ConstMgr.ListDefType))
                        {
                            builder.Append(
                                $"{GetSerializeBasicTypeStatement(valueType, $"entry{indent}.Value", true, indent + 1, $"{space}\t")}");
                        }
                        else if (valueType.IsGenericType &&
                                 valueType.GetGenericTypeDefinition() == ConstMgr.DictDefType)
                        {
                            builder.Append(
                                $"{GetSerializeBasicTypeStatement(valueType, $"entry{indent}.Value", true, indent + 1, $"{space}\t")}");
                        }
                        else
                        {
                            builder.Append(space).Append('\t').Append('\t').Append(Repeat("    ", indent)).Append(
                                $"{GetSerializeBasicTypeStatement(valueType, $"entry{indent}.Value", true, indent, space)};\n");
                        }

                        builder.Append(space).Append('\t').Append(Repeat("    ", indent)).Append("}\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("}\n");
                        //if null then write 0 len
                        builder.Append(space).Append(Repeat("    ", indent)).Append("else\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("{\n");
                        //write len
                        builder.Append(space).Append('\t').Append(Repeat("    ", indent))
                            .Append("writer.Write(false);\n");
                        builder.Append(space).Append(Repeat("    ", indent)).Append("}\n");
                        return builder.ToString();
                    }

                    return $"writer.WriteCommonVal<{BeautifulLongTypeName(mt)}>({val})";
            }
        }

        private static string Repeat(string value, int count)
        {
            if (count < 1) return string.Empty;
            return new StringBuilder(value.Length * count).Insert(0, value, count).ToString();
        }

        private static string BeautifulLongTypeName(this Type mt)
        {
            return $"{mt.Namespace}{(!string.IsNullOrEmpty(mt.Namespace) ? "." : "")}{mt.GetFriendlyName()}";
        }

        /// <summary>
        /// 获取类型名字
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        private static string GetFriendlyName(this Type type)
        {
            string friendlyName = type.Name;
            if (type.IsGenericType)
            {
                int iBacktick = friendlyName.IndexOf('`');
                if (iBacktick > 0)
                {
                    friendlyName = friendlyName.Remove(iBacktick);
                }

                friendlyName += "<";
                Type[] typeParameters = type.GetGenericArguments();
                for (int i = 0; i < typeParameters.Length; ++i)
                {
                    string typeParamName =
                        $"{typeParameters[i].Namespace}{(!string.IsNullOrEmpty(typeParameters[i].Namespace) ? "." : "")}{GetFriendlyName(typeParameters[i])}";
                    friendlyName += (i == 0 ? typeParamName : "," + typeParamName);
                }

                friendlyName += ">";
            }

            return friendlyName;
        }
    }
}